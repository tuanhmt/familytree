<?php

/**
 * @file
 * Module file.
 */

declare(strict_types=1);

/**
 * @file
 * Provides a family node entity type.
 */

use Drupal\user\UserInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * Implements hook_theme().
 */
function ftree_core_theme(): array {
  return [
    'family_node' => ['render element' => 'elements'],
  ];
}

/**
 * Prepares variables for family node templates.
 *
 * Default template: family-node.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing
 *     the family node information and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_family_node(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function ftree_core_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_reassign':
      // Anonymize family nodes.
      $storage = \Drupal::entityTypeManager()->getStorage('family_node');
      $family_node_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($family_node_ids) as $family_node) {
        $family_node->setOwnerId(1)->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function ftree_core_user_predelete(UserInterface $account): void {
  // Delete family nodes that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('family_node');
  $family_node_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  foreach ($storage->loadMultiple($family_node_ids) as $family_node) {
    $family_node->setOwnerId(1)->save();
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function ftree_core_entity_type_alter(array &$entity_types) {
  // Alter the access control handler for family_node.
  if (isset($entity_types['family_node'])) {
    $entity_types['family_node']->setHandlerClass('access', 'Drupal\ftree_core\Access\FamilyNodeAccessControlHandler');
  }
}

/**
 * Helper function to get entities referencing the current entity.
 */
function _ftree_core_get_referencing_entities(EntityInterface $entity) {
  // Get`spouses` and `children`.
  $query = \Drupal::entityQuery('family_node')
    ->accessCheck(FALSE);
  $group = $query->orConditionGroup()
    ->condition('spouses.target_id', $entity->id(), '=')
    ->condition('parents.target_id', $entity->id(), '=');
  $query->condition($group);

  $referenced_ids = $query->execute();

  $referencing_entities = [];
  if (!empty($referenced_ids)) {
    // Load the entities that reference the current entity.
    $referencing_entities = \Drupal::entityTypeManager()
      ->getStorage('family_node')
      ->loadMultiple($referenced_ids);
  }

  return $referencing_entities;
}

/**
 * Implements hook_update_N().
 */
function ftree_core_update_10301() {
  $newStorageDefinitions = [];
  $newStorageDefinitions['gender'] = BaseFieldDefinition::create('list_string')
    ->setLabel(t('Gender'))
    ->setDefaultValue(200)
    ->setSettings([
      'allowed_values' => [
        'male' => 'Male',
        'female' => 'Female',
      ],
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $newStorageDefinitions['spouses'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Spouses'))
    ->setSetting('target_type', 'family_node')
    ->setSetting('handler', 'default')
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'entity_reference_label',
      'weight' => -2,
    ])
    ->setDisplayOptions('form', [
      'type' => 'entity_reference_autocomplete',
      'weight' => -2,
      'settings' => [
        'match_operator' => 'CONTAINS',
        'size' => '60',
        'placeholder' => '',
      ],
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $newStorageDefinitions['siblings'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Siblings'))
    ->setSetting('target_type', 'family_node')
    ->setSetting('handler', 'default')
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'entity_reference_label',
      'weight' => -2,
    ])
    ->setDisplayOptions('form', [
      'type' => 'entity_reference_autocomplete',
      'weight' => -2,
      'settings' => [
        'match_operator' => 'CONTAINS',
        'size' => '60',
        'placeholder' => '',
      ],
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $newStorageDefinitions['children'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Children'))
    ->setSetting('target_type', 'family_node')
    ->setSetting('handler', 'default')
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'entity_reference_label',
      'weight' => -2,
    ])
    ->setDisplayOptions('form', [
      'type' => 'entity_reference_autocomplete',
      'weight' => -2,
      'settings' => [
        'match_operator' => 'CONTAINS',
        'size' => '60',
        'placeholder' => '',
      ],
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $entityUpdateManager = \Drupal::entityDefinitionUpdateManager();
  $entityTypeId = 'family_node';
  $moduleName = 'ftree_core';
  foreach ($newStorageDefinitions as $fieldName => $newStorageDefinition) {
    $field_definition = $entityUpdateManager->getFieldStorageDefinition($fieldName, $entityTypeId);
    $entityUpdateManager->uninstallFieldStorageDefinition($field_definition);
    $entityUpdateManager->installFieldStorageDefinition(
      $fieldName, $entityTypeId, $moduleName, $newStorageDefinition
    );
  }
}

/**
 * Implements hook_update_N().
 */
function ftree_core_update_10302() {
  $newStorageDefinitions = [];

  $newStorageDefinitions['parents'] = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Parents'))
    ->setSetting('target_type', 'family_node')
    ->setSetting('handler', 'default')
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'entity_reference_label',
      'weight' => -2,
    ])
    ->setDisplayOptions('form', [
      'type' => 'entity_reference_autocomplete',
      'weight' => -2,
      'settings' => [
        'match_operator' => 'CONTAINS',
        'size' => '60',
        'placeholder' => '',
      ],
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $entityUpdateManager = \Drupal::entityDefinitionUpdateManager();
  $entityTypeId = 'family_node';
  $moduleName = 'ftree_core';
  foreach ($newStorageDefinitions as $fieldName => $newStorageDefinition) {
    $field_definition = $entityUpdateManager->getFieldStorageDefinition($fieldName, $entityTypeId);
    $entityUpdateManager->uninstallFieldStorageDefinition($field_definition);
    $entityUpdateManager->installFieldStorageDefinition(
      $fieldName, $entityTypeId, $moduleName, $newStorageDefinition
    );
  }
}

/**
 * Implements hook_update_N().
 */
function ftree_core_update_10303() {
  $newStorageDefinitions = [];

  $newStorageDefinitions['ftree_er'] = BaseFieldDefinition::create('ftree_entity_reference')
    ->setLabel(t('Ftree entity reference'))
    ->setSetting('target_type', 'family_node')
    ->setSetting('handler', 'default')
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'entity_reference_label',
      'weight' => -2,
    ])
    ->setDisplayOptions('form', [
      'type' => 'entity_reference_autocomplete',
      'weight' => -2,
      'settings' => [
        'match_operator' => 'CONTAINS',
        'size' => '60',
        'placeholder' => '',
      ],
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $entityUpdateManager = \Drupal::entityDefinitionUpdateManager();
  $entityTypeId = 'family_node';
  $moduleName = 'ftree_core';
  foreach ($newStorageDefinitions as $fieldName => $newStorageDefinition) {
    $entityUpdateManager->installFieldStorageDefinition(
      $fieldName, $entityTypeId, $moduleName, $newStorageDefinition
    );
  }
}

/**
 * Implements hook_update_N().
 */
function ftree_core_update_10304() {
  $field_names = [
    'spouses' => t('Spouses'),
    'siblings' => t('Siblings'),
    'children' => t('Children'),
    'parents' => t('Parents'),
  ];
  $newStorageDefinitions = [];
  foreach ($field_names as $field_name => $label) {
    $newStorageDefinitions[$field_name] = BaseFieldDefinition::create('ftree_entity_reference')
      ->setLabel($label)
      ->setSetting('target_type', 'family_node')
      ->setSetting('handler', 'default')
      ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
  }

  $entityUpdateManager = \Drupal::entityDefinitionUpdateManager();
  $entityTypeId = 'family_node';
  $moduleName = 'ftree_core';
  foreach ($newStorageDefinitions as $fieldName => $newStorageDefinition) {
    $field_definition = $entityUpdateManager->getFieldStorageDefinition($fieldName, $entityTypeId);
    $entityUpdateManager->uninstallFieldStorageDefinition($field_definition);
    $entityUpdateManager->installFieldStorageDefinition(
      $fieldName, $entityTypeId, $moduleName, $newStorageDefinition
    );
  }
}

/**
 * Implements hook_update_N().
 */
function ftree_core_update_10305() {
  $entityUpdateManager = \Drupal::entityDefinitionUpdateManager();
  $entityTypeId = 'family_node';
  $field_definition = $entityUpdateManager->getFieldStorageDefinition('ftree_er', $entityTypeId);
  $entityUpdateManager->uninstallFieldStorageDefinition($field_definition);
}

/**
 * Implements hook_update_N().
 */
function ftree_core_update_10306() {
  $fields = [];
  $fields['generation'] = BaseFieldDefinition::create('integer')
    ->setLabel(t('Generation'))
    ->setDescription(t('The Generation of this fnode in relation to other fnodes.'))
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDefaultValue(0);

  $fields['order'] = BaseFieldDefinition::create('integer')
    ->setLabel(t('Order'))
    ->setDescription(t('The Order of this fnode in relation to siblings.'))
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE)
    ->setDefaultValue(0);

  $entityUpdateManager = \Drupal::entityDefinitionUpdateManager();
  $entityTypeId = 'family_node';
  $moduleName = 'ftree_core';
  foreach ($fields as $fieldName => $newStorageDefinition) {
    $entityUpdateManager->installFieldStorageDefinition(
      $fieldName, $entityTypeId, $moduleName, $newStorageDefinition
    );
  }
}
